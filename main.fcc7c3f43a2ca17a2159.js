(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{CXUk:function(e,t,n){"use strict";n.r(t);var a=n("q1tI"),s=n.n(a),o=n("i8i4"),r=n.n(o),i=n("Eijp"),l=n.n(i);const c=s.a.createContext({modules:[],clusterMap:{},moduleId:null,selectedModuleId:null,onModuleChange:()=>{},onSelectModule:()=>{},onDrawStart:()=>{},onDrawEnd:()=>{},onStatsDataLoaded:()=>{},isDrawing:!1});const d=/(.*?\/node_modules\/.*?)\//,u=/(.*?\/node_modules\/@.*?\/.*?)\//,h=/\(webpack\)/,g=/(^\/.*?node_modules\/).*/;function p(e){return d.test(e)}function m(e){return h.test(e)}const f=/[A-Z]/;class w{constructor(e){if(!e)throw new Error("Missing name argument");this.id=e,this.modIds=new Set}getId(){return this.id}getName(){const e=this.id.split("/");return e[e.length-1]}hasModule(e){return this.modIds.has(e)}getModulesIds(){return Array.from(this.modIds)}getSize(){return this.modIds.size}addModule(e){this.modIds.add(e.id)}}function E(e){const t={};e.forEach(e=>{if(f.test(e.name)){const n=function(e){const t=[],n=e.split("/");for(let e=0;e<n.length;e++){const a=n[e];if(t.push(a),f.test(a[0]))break}return t.join("/")}(e.name);t[n]||(t[n]=new w(n)),t[n].addModule(e)}});const n=[];return Object.keys(t).forEach(e=>{1!==t[e].getSize()&&n.push(t[e])}),n}function S(e){const t=[],n=[],a=[];e.forEach(e=>{m(e.name)?t.push(e):p(e.name)?n.push(e):a.push(e)});const s=function(e){const t={};e.forEach(e=>{const[n,a]=e.name.match(u)||e.name.match(d);t[a]||(t[a]=new w(a)),t[a].addModule(e)});const n=[];return Object.keys(t).forEach(e=>{n.push(t[e])}),n}(n),o=E(a);return[...s,...o]}function v(e){const t=function(e){const t={};return S(e).forEach(e=>{e.getModulesIds().forEach(n=>{t[n]=e})}),t}(e.modules),n=function(e,t){const n=new Set;return e.forEach(e=>{if(!m(e.name))if(p(e.name)){const[t,a]=e.name.match(g);n.add(a)}else{const a=t[e.id];if(!a)return;const s=a.getName(),o=new RegExp(`(.*?)${s}`),[r,i]=e.name.match(o);n.add(i)}}),Array.from(n)}(e.modules,t);return e.modules.map(e=>({id:e.id,name:e.name,reasons:e.reasons,label:function(e,t){const n=t.filter(t=>e.startsWith(t));if(!n)return e;const a=function(e){let t="";return e.forEach(e=>{t.length<e.length&&(t=e)}),t}(n);return e.replace(new RegExp(`^${a}`),"")}(e.name,n)}))}class b extends s.a.Component{constructor(e){super(e);this.state={modules:[],moduleId:null,isDrawing:!1,selectedModuleId:null,onModuleChange:e=>{this.setState({moduleId:e,selectedModuleId:e})},onSelectModule:e=>{this.setState({selectedModuleId:e.node})},onDrawStart:()=>{this.setState({isDrawing:!0})},onDrawEnd:()=>{this.setState({isDrawing:!1})},onStatsDataLoaded:e=>{const t=v(e);this.setState({statsData:e,modules:t,moduleId:null,selectedModuleId:null})}}}render(){return s.a.createElement(c.Provider,{value:this.state},this.props.children)}}var y=n("wIs1"),C=n("mf+E"),I=n("17x9"),x=n.n(I),k=n("TSYQ"),O=n.n(k),j=n("SUMQ"),D=n("ekFh"),M=n.n(D),R=n("YDiY"),N=n.n(R),B=n("2VVu"),q=n.n(B),F=n("TycK"),P=n.n(F);function L({modules:e,moduleId:t,onNodeClick:n,onDrawEnd:a,onDrawStart:s},o){s();const r=function(e){const t={};return e.forEach(e=>{t[e.id]=e}),t}(e),i=[],l=[],c=new Set;!function e(n,a=0){var s;c.has(n.id)||(c.add(n.id),i.push(n.id===t?function(e,t){return{id:e.id,label:e.label,title:e.name,color:"red",level:t,shape:"dot"}}(n,a):function(e,t){return{id:e.id,label:e.id.toString(),title:e.name,color:"gray",level:t,shape:"circle"}}(n,a)),n.reasons.filter(e=>!!r[e.moduleId]).forEach(t=>{const o=r[t.moduleId];l.push((s=o,{from:n.id,to:s.id,arrows:"to"})),c.has(t.moduleId)||e(o,a+1)}))}(r[t]),function({nodes:e,edges:t,onNodeClick:n,onDrawEnd:a},s){console.log(`Rendering graph: nodes - ${e.length}; edges - ${t.length}`);var o=document.getElementById("graph-container"),r={nodes:e,edges:t},i={nodes:{shape:"circle"},width:`${s.width}px`,height:`${s.height}px`,layout:{hierarchical:{direction:"DU",nodeSpacing:80}}},l=new P.a.Network(o,r,i);l.on("click",function(e){e.nodes.length>0&&n({node:e.nodes[0]})}),l.on("afterDrawing",function(e){a()})}({nodes:i,edges:l,onNodeClick:n,onDrawEnd:a},o)}class T extends s.a.Component{constructor(e){super(e),this.container=s.a.createRef()}componentDidMount(){const e=this.container.current.getBoundingClientRect();L(this.props,{width:e.width,height:e.height})}componentDidUpdate(){const e=this.container.current.getBoundingClientRect();L(this.props,{width:e.width,height:e.height})}shouldComponentUpdate(e){return e.moduleId!==this.props.moduleId}render(){return s.a.createElement("div",{ref:this.container,style:{flexGrow:1},dangerouslySetInnerHTML:{__html:'<div id="graph-container" style="height:100%;flex-grow: 1"></div>'}})}}const U=()=>s.a.createElement(c.Consumer,null,e=>e.moduleId?s.a.createElement(T,{modules:e.modules,moduleId:e.moduleId,selectedAsset:e.selectedAsset,clusterMap:e.clusterMap,onNodeClick:e.onSelectModule,onDrawStart:e.onDrawStart,onDrawEnd:e.onDrawEnd}):null);var W=n("1h/R"),A=n.n(W),z=n("/DBP"),J=n.n(z),$=n("24wR"),_=n.n($),G=n("ZqOF"),H=n.n(G),V=n("pPbJ"),Z=n.n(V),X=n("n5s8"),Y=n.n(X),K=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e};function Q(e){const{classes:t,ref:n}=e,a=function(e,t){var n={};for(var a in e)t.indexOf(a)>=0||Object.prototype.hasOwnProperty.call(e,a)&&(n[a]=e[a]);return n}(e,["classes","ref"]);return s.a.createElement(H.a,{fullWidth:!0,InputProps:K({inputRef:n,classes:{input:t.input}},a)})}function ee(e,{query:t,isHighlighted:n}){const a=J()(e.label,t),o=_()(e.label,a);return s.a.createElement(Y.a,{selected:n,component:"div"},s.a.createElement("div",null,o.map((e,t)=>e.highlight?s.a.createElement("span",{key:String(t),style:{fontWeight:300}},e.text):s.a.createElement("strong",{key:String(t),style:{fontWeight:500}},e.text))))}function te(e){const{containerProps:t,children:n}=e;return s.a.createElement(Z.a,K({},t,{square:!0}),n)}function ne(e){return e.label}class ae extends s.a.Component{constructor(...e){var t;return t=super(...e),se.call(this),t}render(){const{classes:e}=this.props;return s.a.createElement(A.a,{theme:{container:e.container,suggestionsContainerOpen:e.suggestionsContainerOpen,suggestionsList:e.suggestionsList,suggestion:e.suggestion},renderInputComponent:Q,suggestions:this.state.suggestions,onSuggestionsFetchRequested:this.handleSuggestionsFetchRequested,onSuggestionsClearRequested:this.handleSuggestionsClearRequested,onSuggestionSelected:this.handleSuggestionSelected,renderSuggestionsContainer:te,getSuggestionValue:ne,renderSuggestion:ee,inputProps:{classes:e,placeholder:"Search and select module",value:this.state.value,onChange:this.handleChange}})}}var se=function(){this.state={value:"",suggestions:[]},this.handleSuggestionsFetchRequested=(({value:e})=>{this.setState({suggestions:function(e,t){const n=e.trim().toLowerCase(),a=[];if(0===n.length)return[];let s=0;for(let e=0;e<t.length;e++){const o=t[e];-1!==o.label.toLowerCase().indexOf(n)&&s<10&&(a.push(o),s++)}return a}(e,this.props.modules)})}),this.handleSuggestionsClearRequested=(()=>{this.setState({suggestions:[]})}),this.handleChange=((e,{newValue:t})=>{this.setState({value:t})}),this.handleSuggestionSelected=((e,t)=>{console.log("selected suggestion",t.suggestion),this.props.onSuggestionSelected(t.suggestion.id)})};ae.propTypes={classes:x.a.object.isRequired};var oe,re=Object(j.withStyles)(e=>({container:{flexGrow:1,position:"relative"},suggestionsContainerOpen:{position:"absolute",zIndex:1,marginTop:e.spacing.unit,left:0,right:0},suggestion:{display:"block"},suggestionsList:{margin:0,padding:0,listStyleType:"none"},input:{color:"white"}}))(e=>s.a.createElement(c.Consumer,null,({modules:t,onModuleChange:n})=>s.a.createElement(ae,K({},e,{modules:(t=t,t.map(e=>({label:e.name,id:e.id,module:e}))),onSuggestionSelected:n})))),ie=n("6ZaM"),le=n.n(ie),ce=n("JgXy"),de=n.n(ce),ue=n("NABS"),he=n.n(ue),ge=n("4eE1"),pe=n.n(ge),me=n("WqRt"),fe=n.n(me);var we=Object(j.withStyles)(e=>({sidebarRoot:{padding:"10px","overflow-y":"scroll"},listItemCaption:{"word-wrap":"break-word"}}))(e=>{const t=e.modules.find(t=>t.id===e.selectedModuleId),{sidebarRoot:n,listItemCaption:a}=e.classes;return t?s.a.createElement("div",{className:n},s.a.createElement(le.a,{align:"center",gutterBottom:!0,noWrap:!0,variant:"title"},t.label),s.a.createElement(de.a,{disablePadding:!0},s.a.createElement(fe.a,{disableSticky:!0},t.reasons.length," Reasons:"),t.reasons.map(t=>{const n=e.modules.find(e=>e.id===t.moduleId);return s.a.createElement(he.a,{key:t.module+t.loc,divider:!0},s.a.createElement(pe.a,null,s.a.createElement(le.a,{noWrap:!0},n.label),s.a.createElement(le.a,{className:a,variant:"caption"},n.name)))}))):null});var Ee=()=>s.a.createElement(c.Consumer,null,e=>s.a.createElement(we,{modules:e.modules||[],selectedModuleId:e.selectedModuleId})),Se=n("zEnc"),ve=n.n(Se);const be=()=>s.a.createElement(c.Consumer,null,e=>e.isDrawing?s.a.createElement(ve.a,null):null);var ye=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e};class Ce extends s.a.Component{render(){const{classes:e,open:t}=this.props;return s.a.createElement("div",{className:e.root},s.a.createElement("div",{className:e.appFrame},s.a.createElement(N.a,{className:O()(e.appBar,{[e.appBarShift]:t,[e["appBarShift-right"]]:t})},s.a.createElement(q.a,null,s.a.createElement(re,null))),s.a.createElement("main",{className:O()(e.content,e["content-right"],{[e.contentShift]:t,[e["contentShift-right"]]:t})},s.a.createElement("div",{className:e.drawerHeader}),s.a.createElement(be,null),s.a.createElement(U,null)),s.a.createElement(M.a,{variant:"persistent",anchor:"right",open:t,classes:{paper:e.drawerPaper}},s.a.createElement(Ee,null))))}}Ce.propTypes={classes:x.a.object.isRequired,theme:x.a.object.isRequired,open:x.a.bool};var Ie=Object(j.withStyles)(e=>({root:{flexGrow:1},appFrame:{zIndex:1,overflow:"hidden",position:"relative",display:"flex",width:"100%"},appBar:{position:"absolute",transition:e.transitions.create(["margin","width"],{easing:e.transitions.easing.sharp,duration:e.transitions.duration.leavingScreen})},appBarShift:{width:"70vw",transition:e.transitions.create(["margin","width"],{easing:e.transitions.easing.easeOut,duration:e.transitions.duration.enteringScreen})},"appBarShift-right":{marginRight:"30vw"},menuButton:{marginLeft:12,marginRight:20},hide:{display:"none"},drawerPaper:{position:"relative",width:"30vw",overflow:"hidden",height:"100vh"},drawerHeader:ye({display:"flex",alignItems:"center",justifyContent:"flex-end",padding:"0 8px"},e.mixins.toolbar),content:{flexGrow:1,display:"flex",flexDirection:"column",backgroundColor:e.palette.background.default,padding:3*e.spacing.unit,transition:e.transitions.create("margin",{easing:e.transitions.easing.sharp,duration:e.transitions.duration.leavingScreen})},"content-right":{marginRight:NaN},contentShift:{transition:e.transitions.create("margin",{easing:e.transitions.easing.easeOut,duration:e.transitions.duration.enteringScreen})},"contentShift-right":{marginRight:0}}),{withTheme:!0})(Ce),xe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e};const ke=Object(y.a)(e=>s.a.createElement(c.Consumer,null,t=>t.modules.length?s.a.createElement(Ie,xe({open:Boolean(t.moduleId)},e)):s.a.createElement(C.a,{to:"/"})));var Oe=n("1OZW"),je=n.n(Oe),De=n("vrOF"),Me=n.n(De);var Re=Object(j.withStyles)(e=>({button:{margin:e.spacing.unit},input:{display:"none"},root:{display:"flex",justifyContent:"center",alignItems:"center",height:"100vh"},actions:{display:"flex",justifyContent:"center",paddingBottom:2*e.spacing.unit,paddingTop:2*e.spacing.unit}}))(class extends s.a.Component{constructor(e){super(e),this.handleFileUpload=(e=>{this.setState({uploading:!0}),null!==e.target.files&&function(e,t){const n=new FileReader;n.onload=(e=>{const a=n.result,s=JSON.parse(a);t(s)}),n.readAsText(e)}(e.target.files[0],e=>{this.props.onStatsUploaded(e),this.setState({uploading:!1})})}),this.state={uploading:!1}}render(){const{classes:e}=this.props;return s.a.createElement("div",{className:e.root},s.a.createElement("div",null,s.a.createElement(le.a,{align:"center",variant:"headline"},"Please, upload your stats.json data"),s.a.createElement(le.a,{align:"center",variant:"caption",color:"textSecondary",paragraph:!0},"webpack --profile --json > stats.json"),s.a.createElement("div",{className:e.actions},s.a.createElement("input",{accept:".json",className:e.input,id:"button-file",onChange:this.handleFileUpload,type:"file"}),s.a.createElement("label",{htmlFor:"button-file"},s.a.createElement(je.a,{color:"primary",variant:"fab",disabled:this.state.uploading,component:"span",className:e.button},s.a.createElement(Me.a,null)))),this.state.uploading?s.a.createElement(ve.a,null):null))}});const Ne=Object(y.a)(e=>s.a.createElement(c.Consumer,null,t=>s.a.createElement(Re,{onStatsUploaded:n=>{t.onStatsDataLoaded(n),e.history.push("/inspect")}}))),Be=()=>s.a.createElement("div",null,"404");var qe=n("2INN"),Fe=n("jKe7"),Pe=n("oFFJ");const Le=()=>s.a.createElement(b,null,s.a.createElement(l.a,null),s.a.createElement(Pe.a,{basename:"/webpack-deps-inspect"},s.a.createElement(Fe.a,null,s.a.createElement(qe.a,{exact:!0,path:"/",component:Ne}),s.a.createElement(qe.a,{path:"/inspect",component:ke}),s.a.createElement(qe.a,{component:Be}))));const Te=document.createElement("div");document.body.appendChild(Te),console.log("starting application ..."),"serviceWorker"in navigator&&navigator.serviceWorker.register("/webpack-deps-inspectservice-worker.js").then(()=>{console.log("Service worker is registered")}).catch(e=>{console.error(e)}),r.a.render(s.a.createElement(Le,null),Te)}},[["CXUk",0,1]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,